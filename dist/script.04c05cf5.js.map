{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","src/js/config.js","src/js/script.js"],"names":["key","url","input","document","querySelector","searchBtn","container","popularMoviesSection","paginationCont","nextPgBtn","prevPgBtn","pageNumber","page","currentData","ajax","pg","fetch","request","json","data","results","forEach","movie","html","title","release_date","vote_average","poster_path","insertAdjacentHTML","style","opacity","addEventListener","e","target","parentElement","classList","contains","movieContainer","closest","createHTML","dataRes","find","children","textContent","console","log","getMoreData","id","trailer","link","requestGenre","genreData","genres","genre_ids","map","genre","push","name","genreHTML","innerHTML","oneMovieHTML","Math","floor","popularity","overview","preventDefault","genreAjax"],"mappings":"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":"script.04c05cf5.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export const key = \"c87d7d62b65ce4618fb6a823d65be34a\";\r\nexport const url = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&q=`;","import { async } from 'regenerator-runtime';\r\nimport 'regenerator-runtime/runtime';\r\nimport { key } from \"./config\";\r\n\r\n// get elements\r\nconst input = document.querySelector(\"#inputField\");\r\nconst searchBtn = document.querySelector(\"#searchBtn\");\r\nconst container = document.querySelector('.container')\r\nconst popularMoviesSection = document.querySelector(\"#popular\");\r\nconst paginationCont = document.querySelector('.pagination');\r\nconst nextPgBtn = document.querySelector('#next');\r\nconst prevPgBtn = document.querySelector('#prev')\r\nconst pageNumber = document.querySelector('#pageNum')\r\n\r\nlet page = 1\r\nlet currentData = {}\r\n\r\nconst ajax = async function (url, pg) {\r\n\r\n    const request = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${key}&language=en-US&page=${pg}&append_to_response=videos`)\r\n    const data = await request.json();\r\n    // create and insert html for popular movies\r\n    data.results.forEach(movie => {\r\n        const html = `\r\n        <article class='popular-movie'>\r\n        <div class = 'details'>\r\n        <h2 class ='movie-title'>${movie.title}</h2>\r\n        <p>${movie.release_date}</p>\r\n        <p><i class=\"fas fa-star star\"></i> ${movie.vote_average}/10</p>\r\n        </div>\r\n        <img class='movie-poster' src='https://image.tmdb.org/t/p/w500${movie.poster_path}'>\r\n        </article>\r\n        `\r\n        popularMoviesSection.insertAdjacentHTML('beforeend', html)\r\n\r\n        // hide prev btn if page 1\r\n        if (page === 1) prevPgBtn.style.opacity = 0;\r\n        page === 1 ? prevPgBtn.style.opacity = 0 : prevPgBtn.style.opacity = 1;\r\n\r\n        currentData = data;\r\n    });\r\n\r\n\r\n}\r\najax('_', page);\r\n\r\n// show more movie details on click\r\npopularMoviesSection.addEventListener('click', function (e) {\r\n    if (e.target.parentElement.classList.contains('container')) return;\r\n    const movieContainer = e.target.closest('article');\r\n\r\n    const createHTML = function (data) {\r\n        // get specific movie data\r\n        if (!movieContainer) return;\r\n        const dataRes = data.results.find((movie) => movie.title === movieContainer.children[0].children[0].textContent);\r\n        console.log(dataRes);\r\n\r\n        // get trailer\r\n        const getMoreData = async function () {\r\n            const request = await fetch(`\r\n            https://api.themoviedb.org/3/movie/${dataRes.id}/videos?api_key=${key}&language=en-US`);\r\n\r\n            const data = await request.json();\r\n            const trailer = data.results[0].key;\r\n            console.log(trailer);\r\n            const link = `https://www.youtube.com/embed/${trailer}`\r\n\r\n            const requestGenre = await fetch(`\r\n            https://api.themoviedb.org/3/genre/movie/list?api_key=c87d7d62b65ce4618fb6a823d65be34a&language=en-US`);\r\n            const genreData = await requestGenre.json();\r\n            const genres = []\r\n            dataRes.genre_ids.map(id => {\r\n                genreData.genres.forEach(genre => {\r\n                    if (genre.id === id) genres.push(genre.name)\r\n                })\r\n            })\r\n            const genreHTML = `\r\n            <p class = 'genre'>${genres}</p>\r\n            `\r\n\r\n            // clear the section and insert details of movie\r\n            popularMoviesSection.innerHTML = '';\r\n            paginationCont.style.opacity = 0;\r\n            const oneMovieHTML = `\r\n\r\n            <div class='popular-movie-closer-look'>\r\n            <h2>${dataRes.title}</h2>\r\n            <div class=\"mini-details\">\r\n                ${genreHTML}\r\n                <p class=\"rating\">${dataRes.vote_average}<i class=\"fas fa-star star\"></i></p>\r\n                <p>Pop rating: ${Math.floor(dataRes.popularity)}</p>\r\n            </div>\r\n            <iframe class='trailers' src=${link} height=\"200\" width=\"300\"\r\n                allowfullscreen='true' title=\"${dataRes.title} trailer\"></iframe>\r\n            <p class=\"overview\">${dataRes.overview}</p>\r\n        </div>\r\n            `\r\n            console.log(dataRes.overview);\r\n            popularMoviesSection.insertAdjacentHTML('afterbegin', oneMovieHTML)\r\n        };\r\n        getMoreData();\r\n\r\n\r\n    }\r\n    createHTML(currentData);\r\n\r\n});\r\n\r\n\r\n// Make next pagination work\r\nnextPgBtn.addEventListener('click', function (e) {\r\n    e.preventDefault();\r\n    const pg = page += 1;\r\n    pageNumber.textContent = `Page ${pg}`\r\n    popularMoviesSection.innerHTML = '';\r\n    ajax('_', pg);\r\n})\r\n\r\n// Make previous pagination work\r\nprevPgBtn.addEventListener('click', function (e) {\r\n    e.preventDefault();\r\n    if (page === 1) return;\r\n    const pg = page -= 1;\r\n    pageNumber.textContent = `Page ${pg}`;\r\n    popularMoviesSection.innerHTML = '';\r\n    ajax('_', pg)\r\n})\r\n\r\n\r\n\r\n\r\nconst genreAjax = async function () {\r\n\r\n}\r\n\r\ngenreAjax();\r\n\r\n\r\n\r\n"]}